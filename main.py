"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞
SOF_stats - –ú–∞—Ä–∫–∏–Ω –ê–Ω–¥—Ä–µ–π, 02.2024
—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:
http://127.0.0.1:7006/search?tag=closure&tag=python&smth=foo&tag=–†—É—Å—Å–∫–∏–π2

requirements:
annotated-types==0.6.0
anyio==4.2.0
certifi==2024.2.2
click==8.1.7
colorama==0.4.6
fastapi==0.109.2
h11==0.14.0
httpcore==1.0.2
httpx==0.26.0
idna==3.6
loguru==0.7.2
pydantic==2.6.1
pydantic_core==2.16.2
sniffio==1.3.0
starlette==0.36.3
typing_extensions==4.9.0
uvicorn==0.27.0.post1
win32-setctime==1.1.0

config_default:
[app]
#project_path = 'opt/vox_message'
self_api_port = 7006 # –ø–æ—Ä—Ç —Ñ–∞—Å—Ç –∞–ø–∏
self_api_host = "127.0.0.1" # –∞–¥—Ä–µ—Å —Ñ–∞—Å—Ç –∞–ø–∏ –±—ç–∫–∞
env_mode = "TEST" # –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
stop_delay = 4 # –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º

[network]
max_requests = 1 # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ stackoverflow
max_alive_requests = 1  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö (keep-alive) –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ stackoverflow
keep_alive = 5 # –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è keep-alive

[logger]
log_console = true # –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
debug_mode = true # –≤—ã–≤–æ–¥–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å DEBUG (–∏–ª–∏ TRACE)
rotation_size = "250 MB" # —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏
retention_time = 5 # –≤—Ä–µ–º—è –≤ –¥–Ω—è—Ö –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏

"""
import asyncio
import os
import tomllib
import typing

import httpx
import loguru
import uvicorn
from json import JSONDecodeError
from asyncio import Queue
from typing import List
from datetime import datetime, timedelta
from colorama import Fore, Back, Style  # colors for custom logger level
from functools import cache  # cache decorator for get_settings()
from sys import stderr  # for setting up logger
from pydantic import BaseModel
from fastapi import FastAPI, Query
from loguru import logger
from starlette.requests import Request
from starlette.responses import JSONResponse

DEFAULT_CONFIG_PATH = 'config_default.toml'  # –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥–∞
TEST_CONFIG_PATH = 'test_config.toml'  # –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥–∞
WAR_CONFIG_PATH = 'config.toml'  # –ø—É—Ç—å –∫ –±–æ–µ–≤–æ–º—É —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥–∞
SOF_URL = "https://api.stackexchange.com/2.2/search?pagesize=100&order=desc&sort=creation&tagged={0}&site=stackoverflow"
VERSION_PATH = 'version'  # –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–µ—Ä—Å–∏–∏


# TODO: set default values in Swagger documentation
# TODO: test limit connections with Postman somehow
# region Config ready

class Settings(BaseModel):
    """ –ú–æ–¥–µ–ª—å pydantic, –≤–∞–ª–∏–¥–∏—Ä—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥ """
    # TODO: add constraints? (use pydantic_settings)
    # TODO: add timeouts for requests
    service_name: str = 'StackOverFlow_stats'  # –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ
    version: str  # –∏–∑ —Ñ–∞–π–ª–∞ —Å –≤–µ—Ä—Å–∏–µ–π –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –≤ config.py)

    # —Ñ–æ—Ä–º–∞—Ç –∏ —Ü–≤–µ—Ç–∞ –ª–æ–≥–æ–≤
    log_format: str = "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green>[<level>{level}</level>]" \
                      "<cyan>[{extra[object_id]}]</cyan>" \
                      "<magenta>{function}</magenta>:" \
                      "<cyan>{line}</cyan> - <level>{message}</level>"

    # app
    # project_path: str = 'opt/StackOverFlow_stats' # –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –∫–æ—Ä–Ω—è –≤–Ω—É—Ç—Ä–∏ –±—É–¥—É—â–µ–≥–æ –¥–æ–∫–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    self_api_port: int  # –ø–æ—Ä—Ç –¥–ª—è FastAPI —Å–µ—Ä–≤–µ—Ä–∞
    self_api_host: str = '127.0.0.1'  # –∞–¥—Ä–µ—Å –¥–ª—è FastAPI —Å–µ—Ä–≤–µ—Ä–∞
    env_mode: str = 'TEST'  # —Å—Ä–µ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–æ–µ–∫—Ç
    stop_delay: int = 10  # –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º

    # network
    max_requests: int = 1  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ stackoverflow
    max_alive_requests: int = 1  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö (keep-alive) –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ stackoverflow
    keep_alive: int = 5  # –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è keep-alive

    # logger
    log_console: bool = True  # –≤—ã–≤–æ–¥–∏—Ç—å –ª–∏ –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    debug_mode: bool = True  # –≤ –¥–µ–±–∞–≥ —Ä–µ–∂–∏–º–µ –ª–æ–≥–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è 3 –¥–Ω—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –ø–∏—à–µ—Ç—Å—è –ª–æ–≥ —É—Ä–æ–≤–Ω—è debug
    rotation_size: str = "500 MB"  # —Ä–∞–∑–º–µ—Ä –≤ –ú–ë –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏ - —Ç–æ –µ—Å—Ç—å –∑–∞–º–µ–Ω—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
    retention_time: int = 5  # –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –≤ –¥–Ω—è—Ö


@cache
def get_settings(_config_path: str = DEFAULT_CONFIG_PATH,
                 _version_path: str = VERSION_PATH) -> Settings:
    """
    Cacheable function (for each module actually runs only once) that returns dict of settings,
    read from .toml file and transformed into one - level dict.
    """
    print(f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤—ã–∑–æ–≤ get_settings(), cache info: {get_settings.cache_info()}')
    if not _config_path:
        if os.name == 'nt':  # WINDOWS
            _config_path = DEFAULT_CONFIG_PATH
        else:  # UNIX
            _config_path = WAR_CONFIG_PATH

    config = Config(_config_path, _version_path)
    return config.settings


class ConfigError(OSError):
    """Raised when smth in config.toml is wrong"""
    pass


def load_toml(config_path, use_env: bool = False) -> dict:
    """ TOML config file related stuff """

    # –ø—É—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (if use_env is True)
    if use_env and "SOF_STATS_CONFIG" in os.environ:
        config_path = os.environ["SOF_STATS_CONFIG"]
        print(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è SOF_STATS_CONFIG –Ω–∞–π–¥–µ–Ω–∞, –∑–Ω–∞—á–µ–Ω–∏–µ: {config_path}")

    if not os.path.isfile(config_path):  # –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π –ø—É—Ç—å, —Ç–æ –≤—ã–π—Ç–∏
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã—Ö–æ–∂—É...")
        # Raise error and just quit the app. There is no best solution here - the alternative would be to use
        # hard-coded values of settings
        raise FileNotFoundError

    print(f"–ò—Å–ø–æ–ª—å–∑—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {config_path}")
    config = {}
    with open(config_path, mode='rb') as f:  # binary mode is required for TOML, but it may be unsafe
        data = tomllib.load(f)
        # print("LOADED TOML", f"data: {data}")
        if data is None or len(data) == 0:
            raise ConfigError('Empty config!')

        config.update({k: v for subdict in data.values() for k, v in subdict.items()})

    print("load_toml result", f"data: {config}")
    return config


class Config:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—å–µ–∫—Ç, –ø–∞—Ä—Å—è—â–∏–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ TOML, –≤–µ—Ä—Å–∏—é –∏ —Ö—Ä–∞–Ω—è—â–∏–π –ø–æ–ª–µ settings —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    def __init__(self, config_path: str = '', version_path: str = ''):
        # load to self.config dict of settings
        self.config = load_toml(config_path)

        # parse project version from version file and add to config
        self.config['version'] = self.get_project_version(version_path)

        # validate settings
        self.settings = Settings(**self.config)

    def get_project_version(self, version_file_path: str = '') -> str:
        """ –í–æ–∑–≤—Ä–∞—Ç –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è """
        if not version_file_path:
            # try to find version in project root. Mb actually unsafe
            version_file_path = os.path.join(self.settings.project_path, "version")

        try:
            with open(version_file_path, "r") as file:
                version = file.readline().strip()
        except FileNotFoundError as fnfe:
            err = f"–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–æ–º –≤–µ—Ä—Å–∏–∏ –ø–æ –ø—É—Ç–∏: {version_file_path}. –û—à–∏–±–∫–∞: {fnfe}. –í—ã—Ö–æ–∂—É... "
            print(err)
            raise FileNotFoundError(err) from fnfe
        except BaseException as e:
            err = f"–û—à–∏–±–∫–∞: {e}. –í—ã—Ö–æ–∂—É... "
            print(err)
            raise Exception(err) from e

        if version is None or version == '':
            err = f'–û—à–∏–±–∫–∞: –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª {version_file_path}, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è! –í—ã—Ö–æ–∂—É...'
            print(err)
            raise ValueError(err)

        print(f'–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª {version_file_path} —Å –≤–µ—Ä—Å–∏–µ–π {version}. –ë–µ–∑ –æ—à–∏–±–æ–∫.')
        return version


def logger_set_up(_settings, logs_path: str = "logs/vox_message.log"):
    """Loguru set up"""
    # TODO: —Ä–∞–∑–¥–µ–ª–∏—Ç—å 3 —ç—Ç–∞–ø–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —Ü–≤–µ—Ç–∞–º, –±–ª–∏–∑–∫–∏–º –∫ –±–µ–ª–æ–º—É
    logger.configure(extra={"object_id": "None"})  # Default values if not bind extra variable
    logger.remove()  # this removes duplicates in the console if we use the custom log format
    logger.level("HL", no=38, color=Back.MAGENTA, icon="üî∫")
    logger.level(f"TRACE", color="<fg #1b7c80>")  # –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Ü–≤–µ—Ç
    logger.level(f"SUCCESS", color="<bold><fg #2dd644>")  # –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Ü–≤–µ—Ç

    if _settings.log_console:
        # for output log in console
        logger.add(sink=stderr,
                   format=_settings.log_format,
                   colorize=True,
                   enqueue=True,  # for better work of async
                   level='TRACE')

    logger.add(sink=logs_path,
               rotation=_settings.rotation_size,
               compression='gz',
               retention=_settings.retention_time,
               format=_settings.log_format,
               enqueue=True,  # for better work of async
               level='TRACE' if _settings.env_mode == 'TEST' else 'DEBUG')
    # level='INFO')


# endregion

# region Requests
async def search_sof_questions(query_tag: str) -> typing.Any | None:
    """ Search stackoverflow questions """
    try:
        if not query_tag:
            raise ValueError('query_tag cannot be empty or null')

        global aclient
        response = await aclient.get("https://api.stackexchange.com/2.3/search",
                                     params={
                                         "pagesize": 100,
                                         "order"   : "desc",
                                         "sort"    : "creation",
                                         "intitle" : query_tag,
                                         "site"    : "stackoverflow"
                                     })
        response.raise_for_status()
    except httpx.HTTPStatusError as e:
        logger.error(f"HTTPStatusError: {e}")
    except httpx.HTTPError as e:
        logger.error(f"HTTPError: {e}")
    except ValueError as e:
        logger.error(f"ValueError: {e}")
    except Exception as e:
        logger.error(f"Exception: {e}")
    else:  # no errors
        return response.json()
    return None
    # return f'{{{query_tag}: Error({e})}}'  # default answer


# endregion

# region Extraction
async def extract_info(tag_answers: list):
    pass


# endregion

# region FastAPI main not ready
async def app_startup():
    """Signal from fastapi"""
    global loop
    log: loguru.Logger = loguru.logger.bind(object_id='Startup')
    log.info("app_startup")
    loop = asyncio.new_event_loop()


async def app_shutdown():
    """ Shutdown signal from FastAPI """
    # TODO: graceful shutdown
    # TODO: –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª—Å—è —Ä–∞–Ω—å—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Ä–≤–∏—Å–∞
    logger.info("app_shutdown")
    global is_running
    is_running = False
    # loop = asyncio.get_running_loop()

    # if hasattr(app, 'db_communicator') and isinstance(app.db_communicator, DbCommunicator):
    #     await app.db_communicator.close_up()
    # if hasattr(app, 'vox_communicator') and isinstance(app.vox_communicator, VoxCommunicator):
    #     await app.vox_communicator.close_up()

    await asyncio.sleep(settings.stop_delay)
    loop.close()


def normal_app() -> FastAPI:
    """ FastAPI settings and endpoints. Mb move to class? """
    fastapi_app = FastAPI(version=settings.version, title=settings.service_name)

    fastapi_app.add_event_handler(event_type='startup', func=app_startup)
    fastapi_app.add_event_handler(event_type='shutdown', func=app_shutdown)

    @fastapi_app.middleware('http')
    async def mdlwr(request: Request, call_next):
        """
        Middleware —ç—Ç–æ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        :param request: –ó–∞–ø—Ä–æ—Å –≤—Ö–æ–¥—è—â–∏–π (–∏–ª–∏ –º–± –∏—Å—Ö–æ–¥—è—â–∏–π)
        :param call_next: –°–ª–µ–¥—É—é—â–∏–π –µ–Ω–¥–ø–æ–∏–Ω—Ç, –∫—É–¥–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ —à–µ–ª –∑–∞–ø—Ä–æ—Å
        """
        req_start_time = datetime.now()
        # –≤—ã–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å —Ä—É—á–∫–∏ –±–µ–∑ –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞
        logger.info(f"Incoming request: /{''.join(str(request.url).split('/')[3:])}")
        response = await call_next(request)
        process_time = (datetime.now() - req_start_time)
        response.headers["X-Process-Time"] = str(process_time)
        logger.debug(f'Request time took {process_time} seconds')
        return response

    @fastapi_app.get("/config")
    async def config() -> Settings | str:
        """ Returns all settings of service """
        if settings.env_mode == 'TEST':
            return settings
        else:
            return f'Unauthorized access to config'

    @fastapi_app.post('/search')
    async def search(tag: List[str] = Query()):
        """
        Standard stackoverflow for received tags
        :param tag:
        :return:
        """
        if not is_running:
            s = f'Error: service is shutting down!'
            logger.error(s)
            return s
        results = []
        for tg in tag:
            tag_answers = await search_sof_questions(tg)
            # await extract_info(tag_answers)
            results.append(tag_answers)
        return f'Requested: {tag}, answers: {results}'

    @fastapi_app.get("/diag")
    async def diag() -> dict:  #
        """Standard /diag route"""
        delta = datetime.now() - start_time
        if delta.days < 0:  # for midnight
            delta = timedelta(
                days=0,
                seconds=delta.seconds,
                microseconds=delta.microseconds
            )

        # uptime calculations
        td_sec = delta.seconds  # getting seconds field of the timedelta
        hour_count, rem = divmod(td_sec, 3600)  # calculating the total hours
        minute_count, second_count = divmod(rem, 60)  # distributing the remainders
        delta = f"{delta.days}:{hour_count}:{minute_count}:{second_count}"

        response = {
            "res"       : "ok",
            "app"       : f'{settings.service_name}',
            "version"   : f'{settings.version}',
            "uptime"    : delta,
            "is_running": is_running
        }
        return response

    @fastapi_app.exception_handler(404)
    async def custom_404_handler(request: Request, _):
        """–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–∫–∏"""

        content = {
            "res": "Error",
            "msg": f"Not found {request.method} API handler for {request.url}"
        }
        logger.warning(f"content={content}")
        return JSONResponse(content=content,
                            status_code=404)

    return fastapi_app


# endregion

def main():
    """ Initialize globals, such as settings and FastAPI app, do some preparations like logger bind and run uvicorn"""

    global settings  # use a global type of link
    # _win_config = constants.DEFAULT_CONFIG_PATH
    # _win_version = constants.DEFAULT_VERSION_PATH
    settings = get_settings()
    # settings = get_settings()

    logger_set_up(settings)
    # logger.bind(object_id=os.path.basename(__file__))
    logger: loguru.Logger = loguru.logger.bind(object_id='Run main')
    logger.info("SETTINGS PARSED", f"data: {settings}")
    logger.log("HL", "Test highlighting!")

    global app  # use global variable
    app = normal_app()

    global is_running  # shows if service is alive
    is_running = True  # ATM actually IDK if its needed

    global start_time
    start_time = datetime.now()

    global limits
    limits = httpx.Limits(max_connections=settings.max_requests,
                          max_keepalive_connections=settings.max_alive_requests,
                          keepalive_expiry=settings.keep_alive)
    global aclient
    aclient = httpx.AsyncClient(limits=limits)

    try:
        # disabled duplicate logs (uvicorn logs)
        # uvicorn_log_config = uvicorn.config.LOGGING_CONFIG
        # del uvicorn_log_config["loggers"]

        uvicorn.run(app=f'__main__:app',
                    host=settings.self_api_host,
                    port=settings.self_api_port,
                    log_level="debug", access_log=False)

    except KeyboardInterrupt:
        logger.info("KEYBOARD INTERRUPT MAIN")
    except Exception as e:
        logger.error("MAIN ERROR", f"e: {e}")


if __name__ == '__main__':
    # global variables declaration
    start_time: datetime = None
    settings: Settings = None
    app: FastAPI = None
    is_running: bool = None
    loop: asyncio.AbstractEventLoop = None
    limits: httpx.Limits = None
    aclient: httpx.AsyncClient = None
    main()
